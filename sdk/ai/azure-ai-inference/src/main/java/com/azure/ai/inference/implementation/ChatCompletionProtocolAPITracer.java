// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.inference.implementation;

import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.CoreUtils;

import java.util.Iterator;
import java.util.Map;
import java.util.ServiceLoader;

/**
 * The internal tracing contract for autogenerated (protocol) APIs in {@link com.azure.ai.inference.ChatCompletionsClient}.
 */
public interface ChatCompletionProtocolAPITracer {
    Map<String, String> PROPERTIES = CoreUtils.getProperties("azure-ai-inference.properties");
    String CLIENT_NAME = PROPERTIES.getOrDefault("name", "UnknownName");
    String CLIENT_VERSION = PROPERTIES.getOrDefault("version", "UnknownVersion");
    String INFERENCE_GEN_AI_SYSTEM_NAME = "az.ai.inference";

    /**
     * Service loader provider to create an implementation of {@link ChatCompletionProtocolAPITracer}.
     */
    interface Provider {
        /**
         * Creates an instance of  {@link ChatCompletionProtocolAPITracer} implementation.
         *
         * @param endpoint the service endpoint.
         * @return the ChatCompletionProtocolAPITracer implementation instance.
         */
        ChatCompletionProtocolAPITracer create(String endpoint);
    }

    /**
     * loads an implementation of {@link ChatCompletionAPITracer}.
     *
     * @param endpoint the service endpoint.
     * @return the {@link ChatCompletionAPITracer} implementation instance.
     */
    static ChatCompletionProtocolAPITracer load(String endpoint) {
        final ServiceLoader<ChatCompletionProtocolAPITracer.Provider> serviceLoader = ServiceLoader
            .load(ChatCompletionProtocolAPITracer.Provider.class, ChatCompletionProtocolAPITracer.class.getClassLoader());
        final Iterator<ChatCompletionProtocolAPITracer.Provider> iterator = serviceLoader.iterator();
        if (iterator.hasNext()) {
            final ChatCompletionProtocolAPITracer.Provider provider = iterator.next();
            return provider.create(endpoint);
        }
        return new NOP();
    }

    /**
     * Traces the protocol method {@link com.azure.ai.inference.ChatCompletionsClient#completeWithResponse(BinaryData, RequestOptions)}.
     *
     * @param operation the operation.
     * @param completeRequest The completeRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @return chat completions for the provided chat messages.
     * Completions support a wide variety of tasks and generate text that continues from or "completes"
     * provided prompt data along with {@link Response}.
     */
    Response<BinaryData> traceCompleteWithResponse(CompleteWithResponseOperation operation, BinaryData completeRequest, RequestOptions requestOptions);

    /**
     * Reference to the {@link ChatCompletionsClientImpl#completeWithResponse(BinaryData, RequestOptions)} operation.
     */
    @FunctionalInterface
    interface CompleteWithResponseOperation {
        /**
         * invokes the operation.
         *
         * @param completeRequest The completeRequest parameter.
         * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
         * @return chat completions for the provided chat messages.
         * Completions support a wide variety of tasks and generate text that continues from or "completes"
         * provided prompt data along with {@link Response}.
         */
        Response<BinaryData> invoke(BinaryData completeRequest, RequestOptions requestOptions);
    }

    /**
     * A no operation implementation for the {@link ChatCompletionProtocolAPITracer} contract.
     */
    final class NOP implements ChatCompletionProtocolAPITracer {
        @Override
        public Response<BinaryData> traceCompleteWithResponse(CompleteWithResponseOperation operation, BinaryData completeRequest, RequestOptions requestOptions) {
            return operation.invoke(completeRequest, requestOptions);
        }
    }
}
