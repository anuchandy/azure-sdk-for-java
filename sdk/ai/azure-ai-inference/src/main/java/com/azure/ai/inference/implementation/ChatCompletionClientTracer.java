// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.inference.implementation;

import com.azure.ai.inference.models.ChatCompletions;
import com.azure.ai.inference.models.ChatCompletionsOptions;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.CoreUtils;

import java.util.Iterator;
import java.util.Map;
import java.util.ServiceLoader;

// 1. 'ChatCompletionClientTracer' is the auto generated tracing interface for the service client 'ChatCompletionClient'.
// 2. For each 'ServiceClient', an interface similar to this will be generated.
// 3. SDK owner will implement 'ChatCompletionClientTracer' to instrument 'ChatCompletionClient' methods
//      3.1 Such an implementation is 'ChatCompletionClientTracerImpl'
// 4. SDK owner will make 'ChatCompletionClientTracerImpl' discoverable via
//        'resources/META-INF/services/com.azure.ai.inference.implementation.ChatCompletionClientTracer'
public interface ChatCompletionClientTracer {
    Map<String, String> PROPERTIES = CoreUtils.getProperties("azure-ai-inference.properties");
    String CLIENT_NAME = PROPERTIES.getOrDefault("name", "UnknownName");
    String CLIENT_VERSION = PROPERTIES.getOrDefault("version", "UnknownVersion");
    String INFERENCE_GEN_AI_SYSTEM_NAME = "az.ai.inference";
    ChatCompletionClientTracer NOP = new NOP();

    static ChatCompletionClientTracer load() {
        final ServiceLoader<ChatCompletionClientTracer> serviceLoader
            = ServiceLoader.load(ChatCompletionClientTracer.class, ChatCompletionClientTracer.class.getClassLoader());
        final Iterator<ChatCompletionClientTracer> iterator = serviceLoader.iterator();
        if (iterator.hasNext()) {
            return iterator.next();
        }
        return NOP;
    }

    ChatCompletions traceComplete(ChatCompletionsOptions request, CompleteOperation operation,
        BinaryData completeRequest, RequestOptions requestOptions, Context context);

    interface CompleteOperation {
        ChatCompletions invoke(BinaryData completeRequest, RequestOptions requestOptions);
    }

    final class NOP implements ChatCompletionClientTracer {
        public ChatCompletions traceComplete(ChatCompletionsOptions request, CompleteOperation operation,
            BinaryData completeRequest, RequestOptions requestOptions, Context context) {
            return operation.invoke(completeRequest, requestOptions.setContext(context));
        }
    }
}
