// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.metricsadvisor.models;

import com.azure.ai.metricsadvisor.implementation.models.AnomalyScope;
import com.azure.ai.metricsadvisor.implementation.models.DimensionGroupIdentity;
import com.azure.ai.metricsadvisor.implementation.models.ValueCondition;
import com.azure.ai.metricsadvisor.implementation.util.AlertConfigurationTransforms;
import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.UUID;

/** The MetricAlertingConfiguration model. */
@Fluent
public final class MetricAlertingConfiguration {
    /*
     * Anomaly detection configuration unique id
     */
    @JsonProperty(value = "anomalyDetectionConfigurationId", required = true)
    private UUID anomalyDetectionConfigurationId;

    /*
     * Anomaly scope
     */
    @JsonProperty(value = "anomalyScopeType", required = true)
    private AnomalyScope anomalyScopeType;

    /*
     * Negation operation
     */
    @JsonProperty(value = "negationOperation")
    private Boolean negationOperation;

    /*
     * The dimensionAnomalyScope property.
     */
    @JsonProperty(value = "dimensionAnomalyScope")
    private DimensionGroupIdentity dimensionAnomalyScope;

    /*
     * The topNAnomalyScope property.
     */
    @JsonProperty(value = "topNAnomalyScope")
    private TopNGroupScope topNAnomalyScope;

    /*
     * The severityFilter property.
     */
    @JsonProperty(value = "severityFilter")
    private SeverityCondition severityFilter;

    /*
     * The snoozeFilter property.
     */
    @JsonProperty(value = "snoozeFilter")
    private MetricAnomalyAlertSnoozeCondition snoozeFilter;

    /*
     * The valueFilter property.
     */
    @JsonProperty(value = "valueFilter")
    private ValueCondition valueFilter;

    /**
     * Get the anomalyDetectionConfigurationId property: Anomaly detection configuration unique id.
     *
     * @return the anomalyDetectionConfigurationId value.
     */
    public UUID getAnomalyDetectionConfigurationId() {
        return this.anomalyDetectionConfigurationId;
    }

    /**
     * Set the anomalyDetectionConfigurationId property: Anomaly detection configuration unique id.
     *
     * @param anomalyDetectionConfigurationId the anomalyDetectionConfigurationId value to set.
     * @return the MetricAlertingConfiguration object itself.
     */
    public MetricAlertingConfiguration setAnomalyDetectionConfigurationId(UUID anomalyDetectionConfigurationId) {
        this.anomalyDetectionConfigurationId = anomalyDetectionConfigurationId;
        return this;
    }

    /**
     * Get the anomalyScopeType property: Anomaly scope.
     *
     * @return the anomalyScopeType value.
     */
    public MetricAnomalyAlertScopeType getAnomalyScopeType() {
        if (this.anomalyScopeType != null) {
            if (this.anomalyScopeType == AnomalyScope.ALL) {
                return MetricAnomalyAlertScopeType.WHOLE_SERIES;
            } else if (this.anomalyScopeType == AnomalyScope.DIMENSION) {
                return MetricAnomalyAlertScopeType.SERIES_GROUP;
            } else if (this.anomalyScopeType == AnomalyScope.TOPN) {
                return MetricAnomalyAlertScopeType.TOP_N;
            } else {
                return MetricAnomalyAlertScopeType.fromString(this.anomalyScopeType.toString());
            }
        }
        return null;
    }

    /**
     * Set the anomalyScopeType property: Anomaly scope.
     *
     * @param anomalyScopeType the anomalyScopeType value to set.
     * @return the MetricAlertingConfiguration object itself.
     */
    public MetricAlertingConfiguration setAnomalyScopeType(MetricAnomalyAlertScopeType anomalyScopeType) {
        if (anomalyScopeType != null) {
            final AnomalyScope innerAnomalyScopeType;
            if (anomalyScopeType == MetricAnomalyAlertScopeType.WHOLE_SERIES) {
                innerAnomalyScopeType = AnomalyScope.ALL;
            } else if (anomalyScopeType == MetricAnomalyAlertScopeType.SERIES_GROUP) {
                innerAnomalyScopeType = AnomalyScope.DIMENSION;
            } else if (anomalyScopeType == MetricAnomalyAlertScopeType.TOP_N) {
                innerAnomalyScopeType = AnomalyScope.TOPN;
            } else {
                innerAnomalyScopeType = AnomalyScope.fromString(anomalyScopeType.toString());
            }
            this.anomalyScopeType = innerAnomalyScopeType;
        }
        return this;
    }

    /**
     * Get the negationOperation property: Negation operation.
     *
     * @return the negationOperation value.
     */
    public Boolean isNegationOperation() {
        return this.negationOperation;
    }

    /**
     * Set the negationOperation property: Negation operation.
     *
     * @param negationOperation the negationOperation value to set.
     * @return the MetricAlertingConfiguration object itself.
     */
    public MetricAlertingConfiguration setNegationOperation(Boolean negationOperation) {
        this.negationOperation = negationOperation;
        return this;
    }

    /**
     * Get the dimensionAnomalyScope property: The dimensionAnomalyScope property.
     *
     * @return the dimensionAnomalyScope value.
     */
    public DimensionKey getDimensionAnomalyScope() {
        if (this.dimensionAnomalyScope != null) {
            return new DimensionKey(this.dimensionAnomalyScope.getDimension());
        }
        return null;
    }

    /**
     * Set the dimensionAnomalyScope property: The dimensionAnomalyScope property.
     *
     * @param dimensionAnomalyScope the dimensionAnomalyScope value to set.
     * @return the MetricAlertingConfiguration object itself.
     */
    public MetricAlertingConfiguration setDimensionAnomalyScope(DimensionKey dimensionAnomalyScope) {
        if (dimensionAnomalyScope != null) {
            this.dimensionAnomalyScope = new DimensionGroupIdentity()
                .setDimension(dimensionAnomalyScope.asMap());
        }
        return this;
    }

    /**
     * Get the topNAnomalyScope property: The topNAnomalyScope property.
     *
     * @return the topNAnomalyScope value.
     */
    public TopNGroupScope getTopNAnomalyScope() {
        return this.topNAnomalyScope;
    }

    /**
     * Set the topNAnomalyScope property: The topNAnomalyScope property.
     *
     * @param topNAnomalyScope the topNAnomalyScope value to set.
     * @return the MetricAlertingConfiguration object itself.
     */
    public MetricAlertingConfiguration setTopNAnomalyScope(TopNGroupScope topNAnomalyScope) {
        this.topNAnomalyScope = topNAnomalyScope;
        return this;
    }

    /**
     * Get the severityFilter property: The severityFilter property.
     *
     * @return the severityFilter value.
     */
    public SeverityCondition getSeverityFilter() {
        return this.severityFilter;
    }

    /**
     * Set the severityFilter property: The severityFilter property.
     *
     * @param severityFilter the severityFilter value to set.
     * @return the MetricAlertingConfiguration object itself.
     */
    public MetricAlertingConfiguration setSeverityFilter(SeverityCondition severityFilter) {
        this.severityFilter = severityFilter;
        return this;
    }

    /**
     * Get the snoozeFilter property: The snoozeFilter property.
     *
     * @return the snoozeFilter value.
     */
    public MetricAnomalyAlertSnoozeCondition getSnoozeFilter() {
        return this.snoozeFilter;
    }

    /**
     * Set the snoozeFilter property: The snoozeFilter property.
     *
     * @param snoozeFilter the snoozeFilter value to set.
     * @return the MetricAlertingConfiguration object itself.
     */
    public MetricAlertingConfiguration setSnoozeFilter(MetricAnomalyAlertSnoozeCondition snoozeFilter) {
        this.snoozeFilter = snoozeFilter;
        return this;
    }

    /**
     * Get the valueFilter property: The valueFilter property.
     *
     * @return the valueFilter value.
     */
    public MetricBoundaryCondition getValueFilter() {
        if (this.valueFilter != null) {
            return AlertConfigurationTransforms.fromInnerValueFilter(this.valueFilter);
        }
        return null;
    }

    /**
     * Set the valueFilter property: The valueFilter property.
     *
     * @param valueFilter the valueFilter value to set.
     * @return the MetricAlertingConfiguration object itself.
     */
    public MetricAlertingConfiguration setValueFilter(MetricBoundaryCondition valueFilter) {
        if (valueFilter != null) {
            this.valueFilter = AlertConfigurationTransforms.toInnerValueConditionForUpdate(valueFilter);
        }
        return this;
    }
}
